"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.getDependencies = exports.ensureRemoteComponentConfig = void 0;
var cannotFindModule = function (err) {
    return err &&
        typeof err.message === "string" &&
        err.message.indexOf("Cannot find module") > -1;
};
var isConfigInResolve = function (config) {
    return typeof config === "object" && "remote-component.config.js" in config;
};
/**
 * Makes sure the config contains remote-component.config.js.
 * If not, then it adds it.
 */
var ensureRemoteComponentConfig = function (_a) {
    var resolve = _a.resolve;
    if (isConfigInResolve(resolve)) {
        return resolve;
    }
    // add remote-component.config.js recursively
    var newResolve = __assign({}, resolve);
    newResolve["remote-component.config.js"] = { resolve: newResolve };
    return newResolve;
};
exports.ensureRemoteComponentConfig = ensureRemoteComponentConfig;
var getDependencies = function () {
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        return exports.ensureRemoteComponentConfig(require("remote-component.config.js"));
    }
    catch (err) {
        // istanbul ignore next: This is just too impossible to test
        if (!cannotFindModule(err)) {
            throw err;
        }
        return {};
    }
};
exports.getDependencies = getDependencies;
//# sourceMappingURL=getDependencies.js.map